#!/usr/bin/env perl

use 5.010;
use strict;
use warnings;

use Perinci::CmdLine::Any;
use Log::Any::For::Builtins qw(system);

binmode STDOUT, ":utf8";

our %SPEC;

sub num2word {
    my ($num, $lang, $opts) = @_;
    $opts //= {};

    my $pho  = $opts->{phone};
    my $spk  = $opts->{speak};

    my $mbrola=1;
    my $words;
    if ($lang eq 'fr') {
        require Lingua::FR::Numbers;
        if ($pho) {
            my @p;
            while (length($num)) {
                push @p, Lingua::FR::Numbers::number_to_fr(substr($num, 0, 2));
                substr($num, 0, 2) = "";
            }
            $words = join ", ", @p;
        } else {
            $words = Lingua::FR::Numbers::number_to_fr($num);
        }
    } elsif ($lang eq 'id') {
        require Lingua::ID::Nums2Words;
        if ($pho) {
            my @p;
            while (length($num)) {
                push @p, Lingua::ID::Nums2Words::nums2words_simple(substr($num, 0, 4));
                substr($num, 0, 4) = "";
            }
            $words = join ", ", @p;
        } else {
            $words = Lingua::ID::Nums2Words::nums2words($num);
        }
    } elsif ($lang eq 'en') {
        require Lingua::EN::Numbers;
        if ($pho) {
            my @p;
            my $i;
            while (length($num)) {
                push @p, Lingua::EN::Numbers::num2en(substr($num, 0, 1));
                substr($num, 0, 1) = "";
                if (++$i % 3 == 0) { push @p, ", " } else { push @p, " " }
            }
            $words = join "", @p;
        } else {
            $words = Lingua::EN::Numbers::num2en($num);
        }
    } elsif ($lang eq 'it') {
        require Lingua::IT::Numbers;
        $mbrola=0; # suara mbrolanya pada jelek/putus (diphone ga lengkap?)
        if ($pho) {
            # actually in italian you can sometimes pronounce per-digit, or by
            # groups or two or more. i'll choose grouping by 2 for more
            # practice.
            $words = join(
                "",
                Lingua::IT::Numbers::number_to_it(substr($num, 0, 2)), ", ",
                Lingua::IT::Numbers::number_to_it(substr($num, 2, 2)), ", ",
                Lingua::IT::Numbers::number_to_it(substr($num, 4, 2)), ", ",
                Lingua::IT::Numbers::number_to_it(substr($num, 6, 2)),
            );
        } else {
            $words = Lingua::IT::Numbers::number_to_it($num);
        }
    } elsif ($lang eq 'zh') {
        require Lingua::ZH::Numbers;
        Lingua::ZH::Numbers->charset("simplified");
        $mbrola=0;
        if ($pho) {
            $words = join(
                "",
                Lingua::ZH::Numbers::number_to_zh(substr($num, 0, 1)), "",
                Lingua::ZH::Numbers::number_to_zh(substr($num, 1, 1)), "",
                Lingua::ZH::Numbers::number_to_zh(substr($num, 2, 1)), "",
                Lingua::ZH::Numbers::number_to_zh(substr($num, 3, 1)), ", ",
                Lingua::ZH::Numbers::number_to_zh(substr($num, 4, 1)), "",
                Lingua::ZH::Numbers::number_to_zh(substr($num, 5, 1)), "",
                Lingua::ZH::Numbers::number_to_zh(substr($num, 6, 1)), "",
                Lingua::ZH::Numbers::number_to_zh(substr($num, 7, 1)),
            );
        } else {
            $words = Lingua::ZH::Numbers::number_to_zh($num);
        }
    } else {
        die "Unsupported language $lang";
    }

    if ($spk) {
        require String::ShellQuote;
        my $cmd;
        if ($mbrola) {
            # * = suka mati di tengah
            # # = kualitas gak bagus, suka gak jelas diphonenya
            # fr: fr1 fr4
            # id: id1*
            # en: en1 us1 us2# us3
            # it: it3* it4*
            my $mv =
                $lang eq 'fr' ? 'fr4' :
                $lang eq 'id' ? 'id1' :
                $lang eq 'en' ? 'en1' :
                $lang eq 'it' ? 'it4' : '';
            $cmd = "espeak-mbrola 2>/dev/null --mv $mv ".
                String::ShellQuote::shell_quote($words);
        } else {
            $cmd = "espeak 2>/dev/null -v $lang ".
                String::ShellQuote::shell_quote($words);
        }
        sleep 2;
        system $cmd;
        sleep 3;
    }
    return $words;
}

$SPEC{gen} = {
    v => 1.1,
    args => {
        lang    => {req=>1, schema=>[str => {req=>1, len=>2}]},
        n       => {schema=>[int => {min=>0, default=>5}]},
        min     => {schema=>[int => {default=>100}]},
        max     => {schema=>[int => {default=>1000000}]},
        phwidth => {schema=>[int => {default=>8}]},
        phone   => {schema=>'bool'},
        speak   => {schema=>'bool'},
        fr_70_90 => {
            summary => 'Practise 70-something and 90-something (phone)',
            description => <<'_',

These two ranges are the problematic ones because they use 60+1x and 80+1x
formula.

_
            schema => 'bool',
        },
    },
    # depends on espeak-mbrola *if* speak=>1
};
sub gen {
    my %args = @_;

    my $lang = $args{lang} or return [400, "Please specify lang"];

    my $n   = $args{n}   // 5;
    my $min = $args{min} // 100;
    my $max = $args{max} // 1000000;
    my $pho = $args{phone};
    my $phwidth = $args{phwidth} // 8;
    my $spk = $args{speak};

    for my $i (1..$n) {
        my $num;
        my $fmt;
        if ($pho) {
            if ($args{fr_70_90}) {
                my $phwidth = int($phwidth/2);
                $num = join("", map {
                    if (rand() < 0.5) {
                        # 7x
                        70+int(10*rand()),
                    } else {
                        # 9x
                        90+int(10*rand()),
                    }
                } 1..$phwidth);
            } else {
                $num = join("", map {int(10*rand())} 1..$phwidth);
            }
            $fmt = length($num);
        } else {
            $num = int($min + ($max-$min+1)*rand());
            $fmt = length($max);
        }
        printf "%-${fmt}s    = %s\n", $num,
            num2word($num, $lang, {
                phone => ($pho ? $phwidth : 0),
                speak => $spk,
            });
    }
    [200];
}

binmode(STDOUT, ":utf8");
Perinci::CmdLine::Any->new(url=>'/main/gen')->run;
