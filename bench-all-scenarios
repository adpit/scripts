#!/usr/bin/env perl

use 5.010;
use strict;
use warnings;
use Log::Any '$log';

use Bencher;
use File::Slurper qw(write_text);
use JSON qw(encode_json);
use Perinci::CmdLine::Any;
use Perinci::Sub::Util qw(err);
use PERLANCAR::Module::List;
use POSIX qw(strftime);

our %SPEC;

$SPEC{app} = {
    v => 1.1,
    args => {
        log_dir => {
            schema => 'str*',
            req => 1,
        },
    },
};
sub app {
    my %args = @_;

    my @scenarios;
    {
        local @INC = ("lib");
        my $res = PERLANCAR::Module::List::list_modules(
            'Bencher::Scenario::', {list_modules=>1, recurse=>1});
        @scenarios = map {s/\ABencher::Scenario:://; $_} sort keys %$res;
        $log->tracef("Scenario modules found: %s", \@scenarios);
        return [304, "No scenario modules found under lib/"] unless @scenarios;
    }

    {
        local @INC = ("lib", @INC);
        for my $sn (@scenarios) {
            $log->infof("Processing scenario %s ...", $sn);
            my $res;

            my $time = strftime("%Y-%m-%dT%H:%M:%S", localtime);

            $res = Bencher::bencher(
                action => 'show-scenario',
                scenario_module => $sn);
            return err("Can't show scenario", $res) unless $res->[0] == 200;
            my $scenario = $res->[2];

            $res = Bencher::bencher(
                action => 'list-participant-modules',
                scenario_module => $sn);
            return err("Can't list participant modules", $res)
                unless $res->[0] == 200;
            my $modules = $res->[2];

            $res = Bencher::bencher(
                action => 'bench',
                scenario_module => $sn);
            return err("Can't bench", $res) unless $res->[0] == 200;
            my $filename = "$args{log_dir}/$sn.$time", encode_json($res);
            $log->tracef("Writing file %s ...", $filename);
            write_text($filename, encode_json($res));

            if (!$scenario->{module_startup} && @$modules) {
                $res = Bencher::bencher(
                    action => 'bench',
                    module_startup => 1,
                    scenario_module => $sn);
                return err("Can't bench (module_startup)", $res)
                    unless $res->[0] == 200;
                my $filename = "$args{log_dir}/$sn-module_startup.$time",
                    encode_json($res);
                $log->tracef("Writing file %s ...", $filename);
                write_text($filename, encode_json($res));
            }
        } # for scenario
    }

    [200];
}

Perinci::CmdLine::Any->new(
    url => '/main/app',
    log => 1,
)->run;
