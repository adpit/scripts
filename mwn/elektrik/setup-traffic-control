#!/usr/bin/perl -w

use strict;
use File::Slurp;
use FindBin '$Bin';
use Getopt::Long;
use LWP::Simple;

# --- begin config
my @GROUPS = (
              # name => (jangan panjang2x karena acl di squid max 31 chars), ips=>['IP', 'IP-IP', 'HOSTNAME', ...]
              # HATI-HATI, squid tidak menerima CNAME utk dstdomain!
              {name => 'dns_server', ips => ['192.168.0.2-192.168.0.3']},
              {name => 'smtp_server', ips => ['smtp.localdomain']},
              {name => 'forum_server', ips => ['gold.localdomain']},
              {name => 'archive_server', ips => ['bismutha.localdomain']},
              {name => 'hosting_server', ips => ['bismuthb.localdomain']},
              {name => 'login_server', ips => ['bismutha.localdomain']},
              {name => 'mkey_server', ips => ['xenon.localdomain']},
              {name => 'monitor_server', ips => ['ciledug.localdomain']},
              {name => 'test_servers', ips => ['192.168.0.51-192.168.0.59']},
              {name => 'test_steven', ips => []},
              {name => 'operator', ips => ['jamal.localdomain']},
              {name => 'kentongan', ips => ['kentongan.localdomain']},
              {name => 'admin_workstations', ips => []}, # akan diisi dari list admin yg absen
              {name => 'workstations', ips => []}, # akan diisi dari list yg absen
              # reserved = .60 - .99
              # wifi = .200 - .254
              # other servers = .2 - .50
);

# --- end config

sub cmd($);

my @MWN_SPANEL_SERVERS = read_hosts_from_file("$Bin/../etc/mwn-spanel-hosting-servers.txt") or die "MWN Spanel servers list is empty!";
my @MWN_CPANEL_SERVERS = read_hosts_from_file("$Bin/../etc/mwn-cpanel-hosting-servers.txt") or die "MWN cPanel servers list is empty!";

# server=UTC, kita di WIT
my ($hour, $wday)  = (gmtime(time() + 7*3600))[2, 6]; # wday: 0=sunday
my $IS_OFFICE_HOUR = $wday>=1 && $wday<=5 && $hour>=7 && $hour<=18;

# ---

my $Current_Chain = "FORWARD";
my %Opts;
my $Squid = "";

GetOptions(
           '--fast' => \$Opts{fast},
           '--help' => \$Opts{help},
          );

if ($Opts{help}) {
    print "--fast Don't rebuild user-defined chains, just update the FORWARD chains\n";
    exit 0;
}

# ---

# initialize user-defined chains
unless ($Opts{fast}) {
    cmd qq[iptables -N c_$_->{name} 2>/dev/null] for (@GROUPS);
}

# set ip2x utk workstations berdasarkan data yg absen
my $absen = get "https://forum.mwn.localdomain/stats/attendance.php";
my @g = grep { $_->{name} eq 'workstations' } @GROUPS;
die "BUG: group 'workstations' not found" unless @g;
my $g = $g[0];
while ($absen =~ /^  - (\d+), ([^,]+), (\d+\.\d+\.\d+\.\d+)/mg) {
    next if $3 eq '192.168.0.1';
    push @{$g->{ips}}, $3;
}

$absen = get "https://forum.mwn.localdomain/stats/attendance_admins.php";
@g = grep { $_->{name} eq 'admin_workstations' } @GROUPS;
die "BUG: group 'admin_workstations' not found" unless @g;
$g = $g[0];
while ($absen =~ /^  - (\d+), ([^,]+), (\d+\.\d+\.\d+\.\d+)/mg) {
    next if $3 eq '192.168.0.1';
    push @{$g->{ips}}, $3;
}

# rebuild FORWARD chain

cmd qq[iptables -F FORWARD];
cmd qq[iptables -P FORWARD ACCEPT];

Allow_Ping();

for my $group (@GROUPS) {
    for my $ip (@{ $group->{ips} }) {
        if ($ip =~ /^(\d+\.\d+\.\d+\.)(\d+)-\1(\d+)$/) {
            #gak didukung di debian, meskipun udah ngeload ipt_iprange?
            #cmd qq[iptables -A FORWARD --src-range $_ -j $group->{name}];
            cmd qq[iptables -A FORWARD -s $1$_ -j c_$group->{name}] for ($2..$3);
            $Squid .= "acl stc_$group->{name} src $1$_\n" for ($2..$3);
        } else {
            cmd qq[iptables -A FORWARD -s $ip -j c_$group->{name}];
            $Squid .= "acl stc_$group->{name} ".($ip =~ /^\d+\.\d+\.\d+\.\d+$/ ? "src $ip" : "srcdomain $ip")."\n";
        }
    }
}



for ("c_dns_server") {
    $Current_Chain = $_;
    unless ($Opts{fast}) {
        Flush_Current_Chain();
        Allow_Dns();
    }
    Squid_Rule("deny");
}



for ("c_smtp_server") {
    $Current_Chain = $_;
    unless ($Opts{fast}) {
        Flush_Current_Chain();
        Allow_Smtp();
    }
    Squid_Rule("deny");
}



for ("c_forum_server") {
    $Current_Chain = $_;
    unless ($Opts{fast}) {
        Flush_Current_Chain();
        Allow_Smtp();
        Allow_Ssh('23.masterweb.net');
    }
    Squid_Rule("deny");
}



for ("c_archive_server") {
    $Current_Chain = $_;
    unless ($Opts{fast}) {
        Flush_Current_Chain();
        Allow_Https();
        Allow_Ssh(); # XXX ke server2x tertentu aja sebetulnya
    }
    Squid_Rule("allow");
}



for ("c_hosting_server") {
    $Current_Chain = $_;
    unless ($Opts{fast}) {
        Flush_Current_Chain();
        Allow_Im(); # utk nanti proxy IM bot
        Allow_Whois(); # utk tesu doang sebetulnya
        Allow_Https();
        Allow_Smtp(); # utk tesu doang sebetulnya, ngetes smtp remote
    }
    Squid_Rule("allow");
}



for ("c_login_server") {
    $Current_Chain = $_;
    unless ($Opts{fast}) {
        Flush_Current_Chain();
        Allow_Ports('8080', @MWN_SPANEL_SERVERS, @MWN_CPANEL_SERVERS);
    }
    Squid_Rule("deny");
}



for ("c_mkey_server") {
    $Current_Chain = $_;
    unless ($Opts{fast}) {
        Flush_Current_Chain();
        Allow_Smtp(); # ngirim2 email langsung, gak lewat smtp.localdomain
    }
    # biar aman, gw allow all dulu deh
    #Squid_Rule("allow", "dstdomain .whmcs.com"); # utk cek lisensi
    #Squid_Rule("allow", "dstdomain .directi.com .enom.com"); # utk konek ke registrar
    #Squid_Rule("allow", "dstdomain ".join(" ", @MWN_SPANEL_SERVERS, @MWN_CPANEL_SERVERS)); # utk server commands
    #Squid_Rule("deny");
    Squid_Rule("allow");
}



for ("c_monitor_server") {
    $Current_Chain = $_;
    unless ($Opts{fast}) {
        Flush_Current_Chain();
        Allow_All(); # wuahahaha..
    }
    Squid_Rule("allow");
}



for ("c_test_servers") {
    $Current_Chain = $_;
    unless ($Opts{fast}) {
        Flush_Current_Chain();
        Allow_Dns(); # boleh pasang resolver sendiri, karena utk test setup mesin colo klien
        # ssh?
        # smtp jangan deh, biar aman
    }
    Squid_Rule("allow", "dstdomain .arsip.or.id .archive.or.id"); # hanya boleh akses ke sini, mirrors
    Squid_Rule("deny");
}



for ("c_test_steven") {
    $Current_Chain = $_;
    unless ($Opts{fast}) {
        Flush_Current_Chain();
    }
    Squid_Rule("deny", "dstdomain .youtube.com"); # test
    Squid_Rule("allow");
}



for ("c_operator") {
    $Current_Chain = $_;
    unless ($Opts{fast}) {
        Flush_Current_Chain();
        Allow_Ftp_Mwn();
        Allow_Cpanel_Mwn();
    }
    Squid_Rule("allow");
}



for ("c_kentongan") {
    $Current_Chain = $_;
    unless ($Opts{fast}) {
        Flush_Current_Chain();
    }
    Squid_Rule("allow"); # boleh jadi mesin browsing deh
}



for ("c_admin_workstations") {
    $Current_Chain = $_;
    unless ($Opts{fast}) {
        Flush_Current_Chain();
        Allow_All(); # wuahahaha..
    }
    Squid_Rule("allow");
}



for ("c_workstations") {
    $Current_Chain = $_;
    unless ($Opts{fast}) {
        Flush_Current_Chain();
        Allow_Ftp_Mwn();
        Allow_Cpanel_Mwn();
        Allow_Im();
        Allow_Whois(); # utk tesu doang sebetulnya
        Allow_Proxy_Mwn(); # utk billing doang sebetulnya
        Allow_Https();
        Allow_Pop3();
        #Allow_Smtp(); # utk ngetes smtp dari hosting.localdomain aja kali ye
        Allow_Ssh(); # temp? utk login ke server2x colo klien misalnya
        Allow_P2P() if !$IS_OFFICE_HOUR;
    }
    Squid_Rule("deny", "dstdomain .youtube.com .friendster.com .rapidshare.com") if $IS_OFFICE_HOUR; # testing
    Squid_Rule("allow");
}



# default rule

# blokir semua outgoing packets ke luar jaringan
cmd qq[iptables -A FORWARD -d '!' 192.168.0.0/24 -j REJECT];

# squid
$Squid .= "acl stc_localdomain src 192.168.0.0/24\n";
$Squid .= "http_access deny stc_localdomain\n";
my $sq = read_file("/etc/squid/squid.conf");
my $h_start  = "# --- BEGIN INSERT setup-traffic-control ---";
my $h_end    = "# --- END INSERT setup-traffic-control ---";
my $qh_start = quotemeta($h_start);
my $qh_end   = quotemeta($h_end);
my $sq_path = "/etc/squid/squid.conf";
$sq = read_file($sq_path);
$sq =~ s/^$qh_start\n.+^$qh_end/$h_start\n$Squid$h_end/sm;
write_file($sq_path, $sq);
cmd qq[chown proxy.proxy  /var/spool/squid/swap.state*]; # skrip restart debian kayaknya gk bener deh, kadang owner file ini jadi root
cmd qq[/etc/init.d/squid reload];

# selesai!

# --- functions ---

# NOTE: jika kita menyebutkan -d HOSTNAME, maka iptables otomatis akan
# menambahkan semua IP jika A recordnya lebih dari 1.

sub Flush_Current_Chain {
    cmd qq[iptables -F $Current_Chain] if $Current_Chain;
}

sub Allow_All {
    cmd qq[iptables -A $Current_Chain -j ACCEPT];
}

sub Deny_All {
    cmd qq[iptables -A $Current_Chain -j REJECT];
}

sub Allow_Ping {
    my ($ports, @hosts) = @_;
    if (@hosts) {
        cmd qq[iptables -A $Current_Chain -p icmp -d $_ -j ACCEPT] for @hosts;
    } else {
        cmd qq[iptables -A $Current_Chain -p icmp       -j ACCEPT];
    }
}

sub Allow_Dns {
    my ($ports, @hosts) = @_;
    if (@hosts) {
        cmd qq[iptables -A $Current_Chain -p tcp -d $_ --dport 53 -j ACCEPT] for @hosts;
        cmd qq[iptables -A $Current_Chain -p udp -d $_ --dport 53 -j ACCEPT] for @hosts;
    } else {
        cmd qq[iptables -A $Current_Chain -p tcp       --dport 53 -j ACCEPT];
        cmd qq[iptables -A $Current_Chain -p udp       --dport 53 -j ACCEPT];
    }
}

sub Allow_Ports {
    my ($ports, @hosts) = @_;
    my @ports = split /,/, $ports;
    if (@hosts) {
        for my $port (@ports) {
            cmd qq[iptables -A $Current_Chain -p tcp -d $_ --dport $port -j ACCEPT] for @hosts;
        }
    } else {
        for my $port (@ports) {
            cmd qq[iptables -A $Current_Chain -p tcp       --dport $port -j ACCEPT];
        }
    }
}

sub Allow_Cpanel {
    die "FATAL: I currently refuse to Cpanel to everybody" unless @_;
    Allow_Ports('2082,2083,2086,2087,2095', @_);
}

sub Allow_Proxy_Mwn {
    # biasanya utk refill enom/directi
    Allow_Ports(1025, '52.masterweb.net');
    Allow_Ports(8082, '23.masterweb.net');
}

sub Allow_Ftp {
    die "FATAL: I currently refuse to FTP to everybody as this opens all high ports" unless @_;
    Allow_Ports('1024:', @_);
}

#sub Allow_Streaming_Radio {
#    # elshinta
#    Allow_Ports('1755', '202.158.49.136');
#}

sub Allow_Pop3  { Allow_Ports('110', @_) }
sub Allow_Smtp  { Allow_Ports('25,995', @_) }
sub Allow_Ssh   { Allow_Ports('22', @_) }
sub Allow_Http  { Allow_Ports('80,443', @_) }
sub Allow_Https { Allow_Ports('443', @_) }
sub Allow_Whois { Allow_Ports('43', @_) }

sub Allow_P2P           { Allow_Ports('1024:', @_) }

sub Allow_Smtp_Gmail    { Allow_Smtp('smtp.gmail.com') }
sub Allow_Ftp_Mwn       { Allow_Ftp(@MWN_SPANEL_SERVERS, @MWN_CPANEL_SERVERS) }
sub Allow_Cpanel_Mwn    { Allow_Ftp(@MWN_CPANEL_SERVERS) }

sub Allow_Im {
    Allow_Ports('5050', '216.155.193.0/24');     # ym: server2x yahoo messenger a.l. scs.msg.yahoo.com, *.msg.dcn.yahoo.com
    Allow_Ports(5222, 'talk.google.com');     # gtalk: which is jabber (port 5222)
    #Allow_Ports('1863', 'messenger.hotmail.com');     # msn (cuma glen yang pake waktu itu)
}

my $I = 0;
sub Squid_Rule {
    my ($allow_or_deny, @extra_acls) = @_;
    die "BUG: first param must be allow or deny" if $allow_or_deny ne 'allow' && $allow_or_deny ne 'deny';
    $I++;
    my $i = 0;
    for (@extra_acls) {
        $i++;
        $Squid .= "acl st${Current_Chain}_${I}_$i $_\n";
    }
    $Squid .= "http_access $allow_or_deny st$Current_Chain".join("", map {" st${Current_Chain}_${I}_$_"} 1..$i)."\n";
}

sub cmd($) {
    print "system(): $_[0]\n";
    system $_[0];
}

sub read_hosts_from_file {
    my $path = shift;
    my @res;
    open F, $path or die "FATAL: Can't open $path: $!";
    while (<F>) {
        chomp;
        next unless /\S/;
        next if /^#/;
        push @res, $_;
    }
    close F;
    @res;
}

__END__
