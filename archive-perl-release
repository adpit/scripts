#!/usr/bin/env perl

use 5.010;
use strict;
use warnings;

use Builtin::Logged qw(system);
use Cwd;
use File::Slurp qw(append_file);
use Perinci::CmdLine;
use POSIX;
#use String::ShellQuote;

our %SPEC;

$SPEC{archive_perl_release} = {
    v => 1.1,
    summary => 'Archive Perl release tarball',
    description => <<'_',

Copy tarball to perl release archive directory. The perl release archive
directory is structured into REPO/STATE/ (or REPO/STATE/YEAR for published
state).

REPO is determined as follows: if

_
    args => {
        tarball => {
            schema => 'str*',
            req => 1,
            pos => 0,
            summary => 'Path of tarball to archive',
        },
        archive_dir => {
            schema => 'str*',
            summary => 'Archive directory',
            description => <<'_',

Defaults to ~/proj/perl/releases.

_
        },
        state => {
            schema => ['str*'=>{
                in=>[qw/published pending cancelled/],
                default=>'published',
            }],
            summary => 'State',
        },
    },
};
sub archive_perl_release {
    my %args = @_;

    my $tarball = $args{tarball};
    (defined $tarball) or return [400, "Please specify tarball"];
    (-f $tarball)
        or return [412, "Tarball file does not exist or is not a file: ".
                       "$tarball"];
    my ($ver) = $tarball =~ /.+-(\d.*)\.(?:tar(?:\.\w+)?|zip)$/
        or return [400, "Can't parse version from tarball name"];

    my $archive_dir = $args{archive_dir} // "$ENV{HOME}/proj/perl/releases";
    (-d $archive_dir)
        or return [412, "Archive directory does not exist: $archive_dir"];

    my $cwd = getcwd;
    my $repo_name = $cwd; $repo_name =~ s!.+/!!;
    my $is_private = $repo_name =~ /^priv-/;
    my @proj = glob ".tag-proj-*";
    for (@proj) { s/^\.tag-proj-// }
    my $repo = @proj ? ($is_private ? "priv-$proj[0]" : $proj[0]) :
        ($is_private ? "PRIVATE_NOPROJ": "cpan");
    (-d "$archive_dir/$repo")
        or return [412, "Repo directory does not exist under archive: ".
                       "$archive_dir/$repo"];

    my $state = $args{state} // 'published';
    my $dir = "$archive_dir/$repo/$state";
    (-d $dir)
        or return [412, "State directory does not exist under archive/repo: ".
                       "$dir"];

    my $cur_date = POSIX::strftime("%Y-%m-%d", localtime);
    my ($cur_year, $cur_mon, $cur_day) = $cur_date =~ /(.+)-(.+)-(.+)/;
    if ($state eq 'published') {
        $dir .= "/$cur_year";
        mkdir $dir unless (-d $dir);
    }

    system "cp", "-av", $tarball, $dir;
    return [500, "Can't copy: $! ($?)"] if $?;

    # try out LTSV format
    my $logline = join(
        "\t",
        sprintf("date:%04d-%02d-%02d", $cur_year, $cur_mon, $cur_day),
        "repo:$repo",
        "file:$tarball",
        "ver:$ver",
        "size:".(-s $tarball),
    ) . "\n";
    append_file("$archive_dir/releases.txt", $logline);
    append_file("$archive_dir/$repo/releases.txt", $logline);

    [200, "OK"];
}

Perinci::CmdLine->new(url=>'/main/archive_perl_release')->run;
