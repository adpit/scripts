#!/usr/bin/env perl

use 5.010;
use strict;
use warnings;
use Log::Any '$log';

use Builtin::Logged qw(system);
use Cwd;
use File::Slurp qw(append_file);
use Perinci::CmdLine::Any -prefer_lite=>1;
use POSIX;
#use String::ShellQuote;

our %SPEC;

$SPEC{archive_perl_release} = {
    v => 1.1,
    summary => 'Archive Perl release tarball',
    description => <<'_',

Copy tarball to perl release archive directory. The perl release archive
directory is structured into REPO/STATE/ (or REPO/STATE/YEAR for published
state).

REPO is determined as follows: XXX

_
    args => {
        tarball => {
            schema => 'str*',
            req => 1,
            pos => 0,
            summary => 'Path of tarball to archive',
        },
        archive_dir => {
            schema => 'str*',
            req => 1,
            summary => 'Archive directory',
            description => <<'_',

_
        },
        log_files => {
            schema => ['array*', of=>'str*'],
            'x.name.is_plural' => 1,
        },
        darkpan_dir => {
            schema => 'str*',
            req => 1,
            summary => 'DarkPAN directory',
            description => <<'_',

Additionally, this function can inject the tarball into the DarkPAN directory.
If you specify this, you'll need to specify `pause_id` also. Currently using
`OrePAN` for this.

_
        },
        repo => {
            schema => 'str*',
        },
        pause_id => {
            schema => 'str*',
            summary => 'PAUSE ID',
            description => <<'_',

Needed if you specify `darkpan_dir`. It does not have to be a real PAUSE ID. The
default is taken from PAUSEID or USER environment.

_
        },
        state => {
            schema => ['str*'=>{
                in=>[qw/published pending cancelled/],
                default=>'published',
            }],
            summary => 'State',
        },
    },
    features => {
        dry_run => 1,
    },
    deps => {
        prog => 'orepan.pl',
    },
};
sub archive_perl_release {
    my %args = @_;

    my $dry = $args{-dry_run};

    my $tarball = $args{tarball};
    (defined $tarball) or return [400, "Please specify tarball"];
    (-f $tarball)
        or return [412, "Tarball file does not exist or is not a file: ".
                       "$tarball"];
    my ($ver) = $tarball =~ /.+-(\d.*)\.(?:tar(?:\.\w+)?|zip)$/
        or return [400, "Can't parse version from tarball name"];

    my $archive_dir = $args{archive_dir}
        or return [400, "Please specify archive_dir"];
    (-d $archive_dir)
        or return [412, "Archive directory does not exist: $archive_dir"];

    my $state = $args{state} // 'published';
    my $dir = "$archive_dir/$state";
    (-d $dir)
        or return [412, "State directory does not exist under archive/repo: ".
                       "$dir"];

    my $cur_date = POSIX::strftime("%Y-%m-%d", localtime);
    my ($cur_year, $cur_mon, $cur_day) = $cur_date =~ /(.+)-(.+)-(.+)/;
    if ($state eq 'published') {
        $dir .= "/$cur_year";
        mkdir $dir unless (-d $dir);
    }

    my @cmd = ("cp", "-av", $tarball, $dir);
    if ($dry) {
        $log->infof("DRY_RUN: system(%s)", \@cmd);
    } else {
        system @cmd;
        return [500, "Can't copy: $! ($?)"] if $?;
    }

    # inject to darkpan
    my $darkpan_dir = $args{darkpan_dir}
        or return [400, "Please specify darkpan_dir"];
    if (-d $darkpan_dir) {
        my @cmd = ("orepan.pl", "--dest", $darkpan_dir,
                   "--pause", ($args{pause_id} // $ENV{PAUSEID} //
                                   $ENV{USER} // "NONAME"),
                   $tarball);
        if ($dry) {
            $log->infof("DRY_RUN: Injecting to DarkPAN: %s", \@cmd);
        } else {
            system @cmd;
            $log->warnf("Can't inject to DarkPAN '%s': %s", $darkpan_dir, $!);
        }
    } else {
        $log->warnf("DarkPAN dir '%s' does not exist, skipped", $darkpan_dir);
    }

    # try out LTSV format
    my $logline = join(
        "\t",
        sprintf("date:%04d-%02d-%02d", $cur_year, $cur_mon, $cur_day),
        "repo:".($args{repo} // ''),
        "file:$tarball",
        "ver:$ver",
        "size:".(-s $tarball),
    ) . "\n";
    for my $logfile (@{ $args{log_files} // ["$archive_dir/releases.txt"] }) {
        $log->infof("Appending to log to %s", $logfile);
        unless ($dry) {
            append_file($logfile, $logline);
        }
    }

    [200, "OK"];
}

Perinci::CmdLine::Any->new(url=>'/main/archive_perl_release')->run;
