#!/usr/bin/perl

use warnings;
use strict;
use Getopt::Long;
use Log::Log4perl qw(:easy);
use Cwd;

# --- globals

my %Opt = (
    log_level => 'info',
    delete    => 0,
);

# --- subs

sub mysystem {
    INFO "system(): " . join( " ", @_ );
    system @_;
}

sub esc {
    local $_ = shift;
    s/'/'"'"'/g;
    "'$_'";
}

# --- main

GetOptions(
    'log-level=s' => \$Opt{log_level},
    'debug'       => sub { $Opt{log_level} = 'debug' },
    'verbose'     => sub { $Opt{log_level} = 'info' },
    'delete'      => \$Opt{delete},
    'help'        => \$Opt{help},
);
if ( $Opt{help} ) {
    print <<EOF;
$0 [options]

Options:
 --log-level=L  Set verbosity level (fatal/error/warn/info/debug).
                Default is verbose.
 --debug        Set verbosity level to debug.
 --verbose      Set verbosity level to verbose.

 --delete       Delete archive after extraction.
EOF
    exit 0;
}

my $log_level;
if    ( $Opt{log_level} eq 'fatal' ) { $log_level = $FATAL }
elsif ( $Opt{log_level} eq 'error' ) { $log_level = $ERROR }
elsif ( $Opt{log_level} eq 'warn' )  { $log_level = $WARN }
elsif ( $Opt{log_level} eq 'info' )  { $log_level = $INFO }
elsif ( $Opt{log_level} eq 'debug' ) { $log_level = $DEBUG }
else {
    die
        "FATAL: Unknown log level: $Opt{log_level}. Use one of: fatal, error, warn, info, debug'\n";
}
Log::Log4perl->easy_init($log_level);

my %archives = (
    rar => { re => qr/\.(rar|cbr)$/i,            cmd => 'rar x' },
    zip => { re => qr/\.(zip|cbz)$/i,            cmd => 'unzip' },
    tar => { re => qr/\.(tar)$/i,                cmd => 'tar xf' },
    tgz => { re => qr/\.(tgz|tar\.gz)$/i,        cmd => 'tar xfz' },
    tbz => { re => qr/\.(tbz2?|tb2|tar\.bz2)$/i, cmd => 'tar xfj' },
    ace => { re => qr/\.(ace)$/i,                cmd => 'unace x' },
);

my $cwd = getcwd;
FILE: for my $f (<*>) {
    chdir $cwd;
    DEBUG "Processing file: `$f' ...";
    for my $ak ( keys %archives ) {
        my $a = $archives{$ak};
        next unless $f =~ /$a->{re}/;
        INFO "File `$f' is archive of type $ak, extracting ...";
        my $d = $f;
        $d =~ s/$a->{re}//;
        $d = "noname" if length($d) == 0;
        if ( -e $d ) {
            WARN "`$d' already exists, skipped";
            next;
        }
        mkdir $d, 0755 or do {
            ERROR "Can't mkdir `$d': $!, skipped\n";
            next;
        };
        chdir $d or LOGEXIT "Can't chdir `$d', $!";
        mysystem $a->{cmd} . " ../" . esc($f);
        if ($?) {
            ERROR "Failed extracting `$f': $! ($?), skipped\n";
            next;
        }
        my @d = <*>;
        if ( @d == 1 && ( -d $d[0] ) ) {
            mysystem "mv " . esc( $d[0] ) . "/* . && rmdir " . esc( $d[0] );
        }

        if ( $Opt{delete} ) {
            unlink "../$f";
        }

        next FILE;
    }
}

