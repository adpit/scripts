#!/usr/bin/perl -w

use autodie;
use strict;
use File::Find;
use File::Slurp;
use Log::Log4perl qw(:easy);
use YAML;
Log::Log4perl->easy_init($DEBUG);

use App::Options (option => {
    nocheck => { type => 'boolean', required => 1, default => 0, },
    norsync => { type => 'boolean', required => 1, default => 0, },
});

unless ($App::options{nocheck}) {
    INFO "Checking repo status ...";
    my $cmd = "repo-check-status";
    my $output = `$cmd 2>&1`;

    if ($? != 0) { LOGDIE "$cmd command failed, please check first.\n$cmd Output:\n$output" }
    if ($output =~ /needs commit|Untracked files/) { LOGDIE "Some repos are not clean, please check first.\n$cmd Output:\n$output" }
    if ($output =~ /not a git/) { LOGDIE "Some dirs are not repos, please check first.\n$cmd Output:\n$output" }
}

INFO "Searching for backup media ...";
my $mp;
unless (($mp) = `LANG=C mount` =~ m! on (/media/cruzer0?)!m) { LOGDIE "Can't find mounted backup media" }

unless ($App::options{norsync}) {
    INFO "Doing backup ...";
    system "rsync -Pav --include /repo ".
        "--include '/repo/*' --include '/repo/*/.git' --include '/repo/*/.git/**' ".
        "--include '/repo/.remote' --include '/repo/.remote/**' ".
        "--exclude '*' --del --force --delete-excluded $ENV{HOME}/repo $mp/";
    if ($? != 0) { LOGDIE "Backup did not succeed, please check" }
}

INFO "ls-laR ...";
system "cd $ENV{HOME}/repo && ( ls -laR | gzip -c > .ls-laR.gz ) && cp .ls-laR.gz $mp/repo/";
if ($? != 0) { LOGDIE "ls-laR did not succeed, please check" }

# masih buggy, disabled, jadi pake ls-lR aja dulu!
__END__
INFO "Storing times ...";
my $times = {};
my $current = $times;
my @parents = ($times);
chdir "$ENV{HOME}/repo";
find({
         wanted => sub {
             return if $_ eq '.' || $_ eq '..';
             print "wanted($_, $File::Find::dir)\n";
             if ((-d $_) && !(-l $_)) {
                 $current->{$_} = {};
             } else {
                 my @st = lstat $_;
                 $current->{$_} = "$st[8]|$st[9]";
             }
         },
         preprocess => sub {
             my (@e) = @_;
             return if $File::Find::dir =~ m!^[^/]+/\.git$!;
             print "preprocess($File::Find::dir)\n";
             push @parents, $current;
             my $d = $File::Find::dir; $d =~ s!.+/!!;
             $current->{$d} //= {};
             $current = $current->{$d};
             #print "times = ", Dump($times), "\n";
             @e;
         },
         postprocess => sub {
             print "postprocess($File::Find::dir)\n";
             $current = pop(@parents);
             #print "times = ", Dump($times), "\n";
         }
     }, <*>);
print Dump $times;
