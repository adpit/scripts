#!/usr/bin/perl

use 5.010;
use strict;
use warnings;
use autodie;

use Log::Any::App -file=>0;
use Setup::Multi qw(setup_multi);
use Setup::File::Symlink qw(setup_symlink);
use Setup::File::Dir qw(setup_dir);

our %SPEC;
$SPEC{setup} = {
    args => {},
};
sub setup {
    my %args = @_;
    my $home = $ENV{HOME};

    # detect environment
    my $env;
    if (-f "/etc/.backpacker-hpmini") {
        $env = "netbook-hpmini";
    } elsif (-f "/etc/.backpacker-eee") {
        $env = "netbook-eee";
    } elsif ("/etc/.builder") {
        $env = "pc";
    } else {
        return [412, "Can't detect environment (e.g. /etc/.builder means builder)"];
    }

    setup_multi(
        subs => [
            "setup_symlink" => [
                {symlink=>"$home/notes"    , target=>"repos/priv-notes"},
                {symlink=>"$home/n"        , target=>"notes"},
                {symlink=>"$home/organizer", target=>"repos/priv-organizer"},
                {symlink=>"$home/o"        , target=>"organizer"},
                {symlink=>"$home/settings" , target=>"repos/priv-settings"},
                {symlink=>"$home/finance"  , target=>"repos/priv-finance"},
                {symlink=>"$home/f"        , target=>"finance"},
                {symlink=>"$home/l"        , target=>"finance/steven/ledger"},
                {symlink=>"$home/bin"      , target=>"repos/scripts"},
                {symlink=>"$home/psgi"     , target=>"repos/psgi"},
                {symlink=>"$home/ref"      , target=>"repos/references"},

                map({symlink=>"$home/.bash$_"  , target=>"settings/.bash$_", replace_file=>1},
                        qw(_aliases _path _prepend _profile _startup _vars rc)),
                {symlink=>"$home/.bash_history", target=>"settings/.bash_history-$env", replace_file=>1},
                {symlink=>"$home/.emacs"       , target=>"settings/.emacs", replace_file=>1},
                {symlink=>"$home/.emacs.d"     , target=>"settings/.emacs.d", replace_dir=>1},
                {symlink=>"$home/.gitconfig"   , target=>"settings/.gitconfig-$env", replace_file=>1},
                {symlink=>"$home/.ssh"         , target=>"settings/.ssh", replace_dir=>1},
                {symlink=>"$home/.gnupg"       , target=>"settings/.gnupg", replace_dir=>1},
            ],

            setup_dir => [
                {path=>"$home/proj", should_exist=>1},
            ],

            "setup_symlink" => [
                {symlink=>"$home/proj/perl"          , target=>"../repos/priv-perl"},
                {symlink=>"$home/proj/p"             , target=>"perl"},
                {symlink=>"$home/proj/pd"            , target=>"perl/dists"},
                {symlink=>"$home/proj/pr"            , target=>"perl/releases"},
                {symlink=>"$home/proj/prp"           , target=>"perl/releases/.published"},
                {symlink=>"$home/proj/spanel"        , target=>"../repos/spanel"},
                {symlink=>"$home/proj/spanel-1315pre", target=>"../repos/spanel-1315pre"},
                {symlink=>"$home/proj/pspanel"       , target=>"../repos/priv-spanel"},
            ],
        ],
        -undo_action=>'do',
    );
}

use Sub::Spec::CmdLine qw(run);
run(module=>"main", load=>0, sub=>"setup");
