#!/usr/bin/env perl

use 5.010;
use strict;
use warnings;

use FileHandle;
use Perinci::CmdLine;
use Perinci::Sub::Gen::AccessTable qw(gen_read_table_func);

our %SPEC;
my $data = [];

my $res = gen_read_table_func(
    name => 'list_perl_releases',
    table_data => $data,
    table_spec => {
        fields => {
            file => {
                schema => 'str*',
                index  => 0,
            },
            repo => {
                schema => 'str*',
                index  => 1,
            },
            date => {
                schema => 'str*',
                index  => 2,
            },
            ver => {
                schema => 'str*',
                index  => 3,
            },
            size => {
                schema => 'int*',
                index  => 4,
            },
            oldname => {
                schema => 'str',
                index  => 5,
            },
        },
        pk => 'file',
    },
    hooks => {
        before_parse_query => sub {
            my %args = @_;
            #my $fargs = $args{_func_args};

            $args{include_renamed} //= 0 if $args{new};

            my %seen_dists;

            # read data from releases.txt
            my $archive_dir = $args{archive_dir} //
                "$ENV{HOME}/proj/perl/releases";
            splice @$data, 0;
            my $fh = FileHandle->new("$archive_dir/releases.txt", "r") or
                return [400, "Can't open releases.txt in $archive_dir: $!"];
            while (my $line = $fh->getline) {

                my $row = { map {/(\w+):(.*)/;($1,$2)} split /\t/, $line };
                my $dist = $row->{file}; $dist =~ s/-\d.+//;

                $seen_dists{$dist}++;
                my $is_new = $seen_dists{$dist} == 1;
                next if $args{new} && !$is_new;
                next if defined($args{new}) && !$args{new} && $is_new;

                if (defined(my $y = $args{year})) {
                    next unless substr($row->{date},0,4) eq sprintf("%04d",$y);
                }
                if (defined(my $m = $args{month})) {
                    next unless substr($row->{date},5,2) eq sprintf("%02d",$m);
                }
                if (defined(my $d = $args{day})) {
                    next unless substr($row->{date},8,2) eq sprintf("%02d",$d);
                }
                if (defined(my $d = $args{dist})) {
                    next unless $d eq $dist;
                }

                next if defined($args{include_renamed}) &&
                    !$args{include_renamed} && $row->{oldname};

                push @$data, $row;

            }
            return;
        },
    },
);
die "Can't generate func: $res->[0] - $res->[1]" unless $res->[0] == 200;
$SPEC{list_perl_releases}{args}{archive_dir} = {
    summary => 'Where to find releases.txt',
    schema => 'str*',
    description => <<'_',

Defaults to ~/proj/perl/releases.

_
};

$SPEC{list_perl_releases}{args}{new} = {
    summary => 'Show only the the first release of a dist/module',
    schema => 'bool',
    description => <<'_',

This also implies --noinclude-renamed, unless --include-renamed has been
explicitly issued.

_
    tags => [qw/category:filter/],
};

$SPEC{list_perl_releases}{args}{dist} = {
    summary => 'Show releases for a specific dist',
    schema => 'str*',
    tags => [qw/category:filter/],
};

$SPEC{list_perl_releases}{args}{include_renamed} = {
    summary => 'Whether to include new dist that is a rename of old dist',
    schema => 'bool',
    description => <<'_',

Marked by its field `oldname` being set.

_
    tags => [qw/category:filter/],
};

# WORKAROUND until perigen-acctbl has support for dates, e.g. generating filter
# fields like DATE.day (and DATE.day.{min,max}, etc), DATE.month, etc.

$SPEC{list_perl_releases}{args}{year} = {
    summary => 'Filter year',
    schema => 'int*',
    tags => [qw/category:filter/],
};
$SPEC{list_perl_releases}{args}{month} = {
    summary => 'Filter month',
    schema => 'int*',
    tags => [qw/category:filter/],
};
$SPEC{list_perl_releases}{args}{day} = {
    summary => 'Filter day',
    schema => 'int*',
    tags => [qw/category:filter/],
};

Perinci::CmdLine->new(url => '/main/list_perl_releases')->run;
