#!/usr/bin/env dummy= perl -0

$|++;
require "/home/steven/bin/func-contrive-subject.pl";
use Getopt::Long;
use File::Find;

$start = "";
$end = "";
$outputname = "";
$progname = $0; $progname =~ s#.+/##;
$chmizer = $progname;

GetOptions(
    "start|s=s" => \$start,
    "end|e=s" => \$end,
    "chmizer|c=s" => \$chmizer,
    "output|o=s" => \$outputname,
);
    
die "Usage: $progname [-s YYYYMM] [-e YYYYMM] dirname ...\n" unless @ARGV;
die "start is not a valid YYYYMM\n" if $start and $start !~ /^(?:19|20)\d\d\d\d$/;
die "end is not a valid YYYYMM\n" if $end and $end !~ /^(?:19|20)\d\d\d\d$/;
die "end must not be smaller than start\n" if $start gt $end;

for $listdir (@ARGV) {
    $listdir =~ s#.+/(.+)#$1#; $listdir =~ s#/$##;
    chdir $listdir or do {warn "  * Can't chdir to $listdir: $!, skipped\n"; next };
    
    $archivename = $listdir;
    if ($outputname) {$archiveoutputname=$outputname;$archiveoutputname=~s/\%n/$archivename/g;} else {$archiveoutputname = $archivename}
    print "+ $listdir ($archivename, $archiveoutputname.hhp)\n";
    
    @periods = ();
    for (grep {(-d $_)} <*>) {
        /^((?:19|20)\d\d\d\d)(?:-((?:19|20)\d\d\d\d))?$/ or next;
        $s = $1;
        $e = $2 || $s;
        push @periods, $_ if ((not $start or $start le $s) and (not $end or $end ge $e));
    }
    @periods or do {warn "  * Nothing to do for $listdir, skipped\n"; next };
    @periods = sort @periods;
    print "  - determining periods to include: $periods[0]..$periods[-1]\n";

    if (should_generate_index()) {
        print "  - (re)generating $listdir/index.html\n";
        open F, ">index.html" or die;
        print F "<!--_auto--><title>$archivename Index</title><h1>$archivename Index</h1>\n<ul>\n";
        print F map {"<li><a href=$_/index.html>$_</a>\n"} @periods;
        print F "</ul>\n";
        print F "<hr>generated by <b>$chmizer</b>, ${\(scalar localtime)}\n";
        close F or die "Can't write $listdir/index.html: $!, stopped\n";
    }
    
    %messages = (); # key = period, value = [ [title, filename], ..., ]
    
    for $period (@periods) {
        chdir $period or die;
        
        @subjects = ();
        print "  - listing files in $period\n";
        for $file (grep {-f} <*>) {
            next if $file eq 'index.html' or $file =~ /^(maillist|threads?|thrds?|subjects?|authors?|dates?)\d*.html$/;
            next if $file =~ /~$/;
            open MSG, $file or die "Can't open $file: $!\n";
            $_ = <MSG>;
            $subject = "";
            $subject = contrive_subject($1) if m#<title[^>]*>(.*?)</title>#is;
            $subject ||= "($file)";
            $comp = lc($subject); for ($comp) { s#(re|fwd)(\s*(\[\d+\]|\(\d+\))\s*)?:\s*##g; }
            push @subjects, [$comp, $file, $subject];
        }
        @subjects = map{[$_->[1], $_->[2]]} sort {$a->[0] cmp $b->[0]} @subjects;
        $messages{$period} = [@subjects];
        
        if (should_generate_index()) {
            print "  - (re)generating $listdir/$period/index.html\n";
            open F, ">index.html" or die "Can't open $listdir/$period/index.html: $!, stopped\n";
            print F "<!--_auto--><title>$period index</title><h2>$period index</h2>\n<ul>\n";
            print F map {"<li><a href=$_->[0]>$_->[1]</a>\n"} @subjects;
            print F "</ul>\n";
            print F "<hr>generated by <b>$chmizer</b>, ${\(scalar localtime)}\n";
            close F or die "Can't write $listdir/$period/index.html: $!, stopped\n";
        }
        chdir ".." or die "Can't chdir ..: $!\n";
    }
    
    print "  - generating $archiveoutputname.hhc\n";
    open F, ">../$archiveoutputname.hhc";
    print F "<ul>\n", item("$listdir\\index.html", $archivename, [map{perioditems($_)} @periods]), "</ul>\n";
    close F or die "Can't write ../$archiveoutputname.hhp: $!, stopped\n";

    print "  - generating $archiveoutputname.hhp\n";
    open F, ">../$archiveoutputname.hhp";
    print F <<_;

[OPTIONS]
Compatibility=1.1
Compiled file=$archiveoutputname.chm
Contents file=$archiveoutputname.hhc
Default Window=$archiveoutputname
Default topic=$listdir\\index.html
Display compile progress=Yes
Full-text search=Yes
Language=0x409
Title=$archivename

[WINDOWS]
$archiveoutputname="$archiveoutputname","$archiveoutputname.hhc","","$listdir\\index.html","$listdir\\index.html",,,,,0x2520,220,0x384e,[84,16,784,504],,,,0,,,0

[FILES]
$listdir\\index.html
_
    finddepth sub {return unless -f; $d="$File::Find::dir/$_"; $d=~s#/#\\#g; print F "$listdir\\$d\n"}, @periods;
    close F or die "Can't write ../$archiveoutputname.hhp: $!, stopped\n";

    # for convenience
    print "  - generating $archiveoutputname.bat\n";
    open F, ">../$archiveoutputname.bat";
    print F qq("C:\\Program Files\\HTML Help Workshop\\hhc.exe" "$archiveoutputname.hhp"\n);
    print F qq(C:\\U\\PLAYWAV.EXE c:\\winnt\\media\\notify.wav >nul\n);
    print F qq(DEL "$archiveoutputname.hhp" "$archiveoutputname.hhc" "$archiveoutputname.bat");
    close F or die "Can't write ../$archiveoutputname.bat: $!, stopped\n";

    chdir ".." or die "Can't chdir ..: $!\n";
}

sub perioditems {
    my ($period) = @_;
    item("$listdir\\$period\\index.html", $period, [map {item("$listdir\\$period\\$_->[0]", $_->[1])} @{ $messages{$period} }]);
}

sub item($$$) {
    my ($url, $title, $subitems) = @_;
    $title = proper_title($title);
    
    qq(<li><object type="text/sitemap"><param name="Local" value="$url"><param name="Name" value="$title"></object>).
    (@$subitems ? "\n<ul>\n" . join("", @$subitems) . "</ul>" : "").
    "\n";
}

# whether we should generate index.html
sub should_generate_index {
    local *F;
    local $_;
    if (-f "index.html") {
        open F, "index.html" or die;
        $_ = <F>;
        close F;
        /<!--_auto-->/ and return 1;
    } else {
        return 1;
    }
}

sub proper_title {
    local $_ = shift;
    s#"#&quot;#g;
    s#[\x00-\x1f\x7f-\xff]##g;
    s#<[^>]+>##sg;
    s#^\s+##s;
    s#\s+$##s;
    s#\s{2,}# #g;
    #s#(\S{32})\S+#$1...#g;
    $_;
}
