#!/usr/bin/env dummy= perl -w

# todo:

# 1. notes

# 2. in img page, show several images before + several images after (prev + next link)

use autodie;
use feature 'state';
use strict;

#use Carp::Always;
use Cwd qw(abs_path);
use DateTime;
use File::Slurp;
use FindBin '$Bin';
use HTML::Entities 'encode_entities';
use Image::Size;
use List::MoreUtils qw(uniq);
use Log::Log4perl qw(:easy);
use Statistics::Descriptive;
use YAML;

use App::Options (
    option => {
        #overwrite => { type => 'boolean', required => 0, default => 0, },
        clean_html => { type => 'boolean', required => 0, default => 0, },
        photo_dir => { type => 'string', require => 1, default => '.', },
        meta_dir => { type => 'string', require => 0, }, # default = {photo_dir}
        log_level => { type => 'string', required => 0, default => 'INFO' },
    },
);

eval { require GD; import GD; };
my $GD_Available = $@ ? 0:1;

if (!defined($App::options{meta_dir})) { $App::options{meta_dir} = $App::options{photo_dir} }

if ( $App::options{log_level} eq 'FATAL' ) {
    Log::Log4perl->easy_init($FATAL);
}
elsif ( $App::options{log_level} eq 'ERROR' ) {
    Log::Log4perl->easy_init($ERROR);
}
elsif ( $App::options{log_level} eq 'WARN' ) {
    Log::Log4perl->easy_init($WARN);
}
elsif ( $App::options{log_level} eq 'INFO' ) {
    Log::Log4perl->easy_init($INFO);
}
else { Log::Log4perl->easy_init($DEBUG) }

DEBUG "Opening meta file ($App::options{meta_dir}/meta.yaml) ...";
my $meta = Load(scalar read_file "$App::options{meta_dir}/meta.yaml");

DEBUG "Processing photo dir ($App::options{photo_dir}) ...";
chdir $App::options{photo_dir};

if ($App::options{clean_html}) {
    no autodie;
    unlink "index.html", <tag_*.html>, <note_*.html>, <img_*.html>;
    exit 0;
}

unless (-f "jquery.js") {
    INFO "Copying jquery.js ...";
    system "cp -H ".escapeshellarg($Bin)."/jquery.js .";
}

unless (-f "jquery.simplemodal.js") {
    INFO "Copying jquery.simplemodal.js ...";
    system "cp -H ".escapeshellarg($Bin)."/jquery.simplemodal.js .";
}

my @images = sort { lc($a) cmp lc($b) } (<*.jpg>, <*.JPG>);

INFO "Generating thumbnails ...";
system "mkdir -p .tn";
for my $i (0..$#images) {
    my $filename = $images[$i];
    my $tnname = tnname($filename);
    unless (-s $tnname) {
        my $filesize = (-s $filename)/1024;
        my ($x, $y) = imgsize($filename);
        my $x2 = 120; my $y2 = int($y/$x*$x2);
        INFO sprintf "(%d/%d) Generating thumbnail %s ...", $i+1, scalar(@images), $tnname;
        if ($GD_Available) {
            my $image = GD::Image->newFromJpeg($filename);
            my $image2 = GD::Image->new($x2, $y2);
            $image2->copyResized($image, 0, 0, 0, 0, $x2, $y2, $x, $y);
            write_file $tnname, $image2->png;
        } else {
            system qq(convert "$filename" -resize ${x2}x$y2 "$tnname");
        }
    }
}

INFO "Generating tag pages ...";
my %tag_images;
for my $img (keys %{ $meta->{images} }) {
    my $v = $meta->{images}{$img};
    my $tags = $v->{tags};
    for my $tag0 (@$tags) {
        my ($prefix, $tag1);
        if ($tag0 =~ /([^:]+):(.+)/) {
            $prefix = $1; $tag1 = $2;
        } else {
            $prefix = ""; $tag1 = $tag0;
        }
        my $tag2 = "";
        for my $t (reverse split m!/!, $tag1) {
            $tag2 = $t . (length($tag2) ? "/" : "") . $tag2;
            my $tag = (length($prefix) ? "$prefix:" : "") . $tag2;
            $tag_images{$tag} //= [];
            push @{ $tag_images{$tag} }, $img;
        }
    }
}

# XXX sort images in each tag
for my $tag (keys %tag_images) {
    INFO "Generating tag page: $tag ...";
    my $n = scalar(@{ $tag_images{$tag} });
    open F, ">" . tags_filename($tag); # XXX how to handle conflict if there are two tags with the same filename, e.g. foo: & foo, -> foo_
    print F "<html><script src=jquery.js></script><script src=jquery.simplemodal.js></script>";
    print F "<title>Tag: ".encode_entities($tag)." ($n)</title>\n";
    print F "<h1>Tag: ".encode_entities($tag)." ($n)</h1>\n";
    print F (gen_html_thumbs($tag_images{$tag}));
    print F "</html>\n";
    close F;
}

INFO "Generating image pages ...";
for my $i (0..$#images) {
    my $filename = $images[$i];
    my $pagename = imgpagename($filename);
    #unless (-s $pagename) {
    unless (0) {
        INFO sprintf "(%d/%d) Generating image page %s ...", $i+1, scalar(@images), $pagename;
        my ($x, $y) = imgsize($filename);
        my $m = $meta->{images}{$filename};
        my $title = $filename;
        $title = $m->{title} if length($m->{title});
        open F, ">$pagename";
        print F "<html><head><script src=jquery.js></script><script src=jquery.simplemodal.js></script>";
        print F "<title>Image: ".encode_entities($title)."</title>\n";
        print F "</head><body bgcolor=#ffffcc>\n";
        print F "<div align=center>\n";
        print F "<table width=100%><tr><td nowrap>";
        for (-2 .. -1) {
            if ($i+$_ >= 0) { print F "<a href=".imgpagename($images[$i+$_])."><img border=0 src=".tnname($images[$i+$_])."></a> " }
        }
        print F "<a href=$filename><img border=0 src=$filename width=400></a> ";
        for (1 .. 2) {
            if ($i+$_ < @images) { print F "<a href=".imgpagename($images[$i+$_])."><img border=0 src=".tnname($images[$i+$_])."></a> " }
        }
        print F "</td></tr></table>\n";
        print F "<p><i>$title</i></p>\n";
        print F sprintf "<p>Dimension: <b>%d x %d</b>. Size: <b>%.0fK</b></p>\n", $x, $y, (-s $filename)/1024;
        print F sprintf "<p>Tags: %s</p>\n", gen_html_tags($m->{tags});
        print F "<p><a href=index.html>Back to index</a></p>\n";
        print F "</div>\n";
        print F "</body></html>\n";
        close F;
    }
}

INFO "Generating note pages ...";
if ($meta->{notes}) {
    my $i = 0;
    for my $note (@{ $meta->{notes} }) {
        $i++;
        my @note_imgs;
        if ($note->{images}) {
            for my $imgspec (@{ $note->{images} }) {
                if (!ref($imgspec)) {
                    push @note_imgs, $imgspec;
                } else {
                    if ($imgspec->[0] eq 'with_any_tags') {
                        # find all images which have any of the specified tags
                        for my $im (@images) {
                            my $found;
                          L1:
                            for my $j (1..scalar(@$imgspec)-1) {
                                for (@{ $meta->{images}{$im}{tags} }) {
                                    if ($imgspec->[$j] eq $_) { $found++; last L1 }
                                }
                            }
                            push @note_imgs, $im if $found;
                        }
                    } elsif ($imgspec->[0] eq 'with_all_tags') {
                        # find all images which have all of the specified tags
                        for my $im (@images) {
                            my $found = 0;
                            for my $j (1..scalar(@$imgspec)-1) {
                              L2:
                                for (@{ $meta->{images}{$im}{tags} }) {
                                    #DEBUG "  $imgspec->[$j] vs $_";
                                    if ($imgspec->[$j] eq $_) { $found++; last L2 }
                                }
                            }
                            #DEBUG "img=$im, found=$found, spec=".Dump($imgspec);
                            push @note_imgs, $im if $found eq @$imgspec-1;
                        }
                    } else {
                        die "Invalid image spec: ".Dump($imgspec);
                    }
                }
            }
            @note_imgs = uniq(@note_imgs);
            $note->{NUM_IMAGES} = scalar(@note_imgs);
        }
        my $title = "#$i";
        $title = $note->{title} if $note->{title};
        INFO "Generating note page: $title ...";
        my $notename = notes_filename($i);
        open F, ">$notename";
        print F "<html><script src=jquery.js></script><script src=jquery.simplemodal.js></script>";
        print F "<title>Note: $title</title>\n";
        my $content = $note->{note};
        for ($content) { $_ = encode_entities($_); s/\n\n/<p>/g }
        print F "<h1>$title</h1>\n";
        print F $content;
        print F "<h2>Images</h2>\n";
        print F gen_html_thumbs(\@note_imgs);
        print F "</html>";
        close F;
    }
}

INFO "Generating index page ...";
my $photo_dir = abs_path("."); $photo_dir =~ s!.*/!!;
my $album_title = $meta->{album_title} // $photo_dir;
open F, ">index.html";
print F "<html><head><title>".encode_entities($album_title)."</title>\n";
print F "<script src=jquery.js></script>\n";
print F "<script src=jquery.simplemodal.js></script>\n";

print F "</head>\n<body>\n";
print F "<h1>".encode_entities($album_title)."</h1>\n";

print F "<h2>All tags (".scalar(keys %tag_images).")</h2>\n";
DEBUG "\%tag_images = ".Dump(\%tag_images);
print F gen_html_tags([sort keys %tag_images]);

if ($meta->{notes}) {
    print F "<h2>All notes (".scalar(@{ $meta->{notes} }).")</h2>\n";
    print F "<ol>\n";
    my $i = 0;
    for my $note (@{ $meta->{notes} }) {
        $i++;
        my $title = "Note #$i";
        $title = $note->{title} if $note->{title};
        print F "<li><a href=".notes_filename($i).">$title</a> ($note->{NUM_IMAGES} images)\n";
    }
    print F "</ol>\n";
}

print F "<h2>All images (".scalar(@images).")</h2>\n";
print F (gen_html_thumbs(\@images));

print F "<i>Generated by $ENV{USER} on ".`hostname`." using $0 on ".scalar(localtime)."</i>\n";
print F "</body>\n";
print F "</html>\n";
close F;

sub filename_esc {
    my ($str) = @_;
    $str =~ s/\W+/_/g;
    $str;
}

sub tnname {
    my ($img) = @_;
    my $tnname = $img;
    $tnname =~ s/\.jpg$//i;
    $tnname .= ".png";
    ".tn/$tnname";
}

sub tags_filename {
    my ($tag) = @_;
    "tag_" . filename_esc($tag) . ".html";
}

sub gen_html_thumbs {
    my ($imgs, $opts) = @_;
    $opts //= {};
    my $res = "<table cellpadding=3>\n";
    my $col = 0;
    for (@$imgs) {
        $col = 0 if $col++ == 5;
        $res .= "<tr>\n" if $col == 1;
        my $title = "";
        if (my $m = $meta->{images}{$_}) {
            if (length $m->{title}) {
                $title = $m->{title};
            } elsif (@{ $m->{tags} }) {
                $title = "Tags: ".join(", ", @{ $m->{tags} });
            }
        }
        $res .= "<td><a href=".imgpagename($_).($opts->{target} ? " target=$opts->{target}" : "").
            " xxxonclick=\"\$.modal('<iframe width=550 height=450 src=".imgpagename($_)."></iframe>',{minWidth: 550, minHeight: 450, onClose: function (dlg) {\$.modal.close()}});return false\"><img border=0 src=".tnname($_).
            " title=\"".encode_entities($title)."\"></a><br>$_</td>\n";
        $res .= "</tr>\n" if $col == 0;
    }
    $res .= "</tr>\n" unless $col == 0;
    $res .= "</table>\n";
    $res;
}

sub gen_html_tags {
    my ($tags) = @_;
    state $stat;

    if (!$stat) {
        $stat = Statistics::Descriptive::Full->new;
        $stat->add_data(map { scalar @{ $tag_images{$_} } } keys %tag_images);
        DEBUG "\$stat->add_data(".join(", ", map { scalar @{ $tag_images{$_} } } keys %tag_images).")";
    }

    # doesn't give what i want? so i'll use quantile for the moment
    #my $f = $stat->frequency_distribution_ref(7);
    #DEBUG "\$f = { ".join(", ", map {"$_ => $f->{$_}"} sort keys %$f)." }";
    #my @nums = reverse sort keys %$f;
    #my @sizes = qw(small medium medium medium large x-large xx-large);

    state $nums;
    if (!$nums) {
        $nums = [map {$stat->quantile($_)} 0..4];
        DEBUG "\$nums = [".join(", ", @$nums)."]";
    }
    state $sizes = [qw(small medium medium large x-large)];

    my $i = 0;
    my $res = "";
    for (@$tags) {
        my $num = scalar(@{ $tag_images{$_} });
        my $size = $sizes->[0];
        for my $j (1..@$nums) {
            if ($num >= $nums->[@$nums-$j]) { $size = $sizes->[@$nums-$j]; last }
        }
        $res .= "\n, " if $i++;
        $res .= "<span style=\"font-size: $size\"><a href=".tags_filename($_).">$_</a> ($num)</span>";
    }
    $res;
}

sub imgpagename {
    my ($img) = @_;
    "img_$img.html";
}

sub notes_filename {
    my ($i) = @_;
    "note_$i.html";
}

sub escapeshellarg {
    local $_ = shift;
    s/'/'"'"'/g;
    "'$_'";
}
