#!/usr/bin/env perl

# TODO: when non-interactive, the default is used, e.g. c=AU, ST=Some-State,
# etc.

use 5.010;
use strict;
use warnings;
use Log::Any::App '$log';

use Expect;
use Log::Any::For::Builtins qw(system);
use Perinci::CmdLine;
use SHARYANTO::Proc::ChildError qw(explain_child_error);

our %SPEC;

$SPEC{create_ssl_csr} = {
    v => 1.1,
    args => {
        hostname => {
            schema => ['str*' => match => qr/\A\w+(\.\w+)*\z/],
            req => 1,
            pos => 0,
        },
        interactive => {
            schema => [bool => default => 0],
            cmdline_aliases => {
                i => {},
            },
        },
        wildcard => {
            schema => [bool => default => 0],
            summary => 'If set to 1 then Common Name is set to *.hostname',
            description => 'Only when non-interactive',
        },
    },
    deps => {
        exec => 'openssl',
    },
};
sub create_ssl_csr {
    my %args = @_;

    my $h = $args{hostname};

    system("openssl genrsa 2048 > $h.key");
    return [500, "Can't generate key: ".explain_child_error()] if $?;

    my $cmd = "openssl req -new -key $h.key -out $h.csr";
    if ($args{interactive}) {
        system $cmd;
        return [500, "Can't generate csr: ".explain_child_error()] if $?;
    } else {
        my $exp = Expect->spawn($cmd);
        return [500, "Can't spawn openssl req"] unless $exp;
        $exp->expect(
            30,
            [ qr!^.+\[[^\]]*\]:!m ,=> sub {
                  my $exp = shift;
                  my $prompt = $exp->exp_match;
                  if ($prompt =~ /common name/i) {
                      $exp->send("$h\n");
                  } else {
                      $exp->send("\n");
                  }
                  exp_continue;
              } ],
        );
        $exp->soft_close;
    }

    $log->info("Your certificate has been created at $h.csr");

    [200];
}

Perinci::CmdLine->new(url => '/main/create_ssl_csr')->run;
